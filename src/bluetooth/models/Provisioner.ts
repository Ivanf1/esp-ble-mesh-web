import utils from "../../utils/utils";
import BluetoothManager from "../BluetoothManager";
import pduBuilder, { MessageType } from "../pduBuilder";

enum ProvisioningType {
  INVITE = "00",
  CAPABILITIES = "01",
  START = "02",
  PUBLIC_KEY = "03",
  INPUT_COMPLETE = "04",
  CONFIRMATION = "05",
  RANDOM = "06",
  DATA = "07",
  COMPLETE = "08",
}
interface ProvisionerProps {
  bluetoothManager: BluetoothManager;
}
class Provisioner {
  private nodeToProvision = {
    numberOfElements: "",
    algorithms: "",
    pubKeyType: "",
    staticOOBType: "",
    outputOOBSize: "",
    outputOOBAction: "",
    inputOOBSize: "",
    inputOOBAction: "",
    publicKey: "",
  };
  private publicKey = "";
  private isProvisioning = false;
  private bluetoothManager: BluetoothManager;

  constructor(props: ProvisionerProps) {
    this.bluetoothManager = props.bluetoothManager;
  }

  private waitAndSendMessage(message: string, waitTime: number) {
    setTimeout(() => {
      this.bluetoothManager.sendProxyPDU(message);
    }, waitTime);
  }

  /**
   * Provisioning process steps:
   *
   * 1) Provisioning Invite. The Provisioner will invite the new device to join the mesh network.
   * 2) Provisioning Capabilities. The device to be provisioned responds to the invite by sending its capabilities.
   * 3) Provisioning Start. The Provisioner upon receiving the capabilities, sends a provisioning start message
   *    stating the algorithm and authentication method to use.
   * 4) Provisioning Public Key (Provisioner). The Provisioner sends its public key to the new device.
   * 5) Provisioning Public Key (Device). The device sends its public key to the Provisioner.
   * 6) Provisioning Confirmation (Provisioner). The Provisioner will calculate a confirmation value that is based
   *    off of all the information already exchanged, a random number that has not been exchanged yet, and an
   *    authentication value that is communicated OOB.
   *
   */
  startProvisioningProcess() {
    if (this.isProvisioning) return;
    this.isProvisioning = true;
    this.publicKey = "";

    const inviteMessage = this.makeInviteMessage();
    console.log("sending invite message");
    // this.waitAndSendMessage(inviteMessage, 3000);
    this.bluetoothManager.sendProxyPDU(inviteMessage);
  }

  makeInviteMessage(): string {
    return pduBuilder.finalizeProxyPDU("0000", MessageType.PROVISIONING);
  }

  /**
   * Refer to Mesh Profile Specification 5.4.1.3.
   */
  private makeStartMessage() {
    // No OOB authentication is used.
    // Refer to Mesh Specification Profile 5.4.1.3 table 5.28.
    const authenticationMethod = "00";

    // Blink. Even if we do not use an authentication method we
    // have to specify this field.
    // Refer to Mesh Specification Profile 5.4.1.3 table 5.29.
    const authenticationAction = "00";

    // Even if we do not use an authentication method we
    // have to specify this field.
    // Refer to Mesh Specification Profile 5.4.1.3 table 5.30.
    const authenticationSize = "00";

    const pdu =
      ProvisioningType.START +
      this.nodeToProvision.algorithms.substring(0, 2) +
      this.nodeToProvision.pubKeyType +
      authenticationMethod +
      authenticationAction +
      authenticationSize;

    return pduBuilder.finalizeProxyPDU(pdu, MessageType.PROVISIONING);
  }

  private async makePublicKeyMessage() {
    // a new key pair shall be generated by the Provisioner.
    const key = await window.crypto.subtle.generateKey(
      { name: "ECDH", namedCurve: "P-256" },
      true,
      ["deriveBits"]
    );
    const rawKey = await window.crypto.subtle.exportKey("raw", key.publicKey);
    this.publicKey = utils.arrayBufferToHex(rawKey).substring(2);

    const pdu = ProvisioningType.PUBLIC_KEY + this.publicKey;
    return pduBuilder.finalizeProxyPDU(pdu, MessageType.PROVISIONING);
  }

  private makeConfirmationMessage() {}

  async parseProvisionerPDU(pdu: string) {
    if (!this.isProvisioning) return;

    const provisioningType = pdu.substring(0, 2) as ProvisioningType;
    const data = pdu.substring(2);

    switch (provisioningType) {
      case ProvisioningType.CAPABILITIES:
        console.log("received capabilities");
        this.parseCapabilitiesPDU(data);

        console.log("sending start message");
        this.bluetoothManager.sendProxyPDU(this.makeStartMessage());
        // Wait for the previous message to be sent before sending another message
        this.waitAndSendMessage(await this.makePublicKeyMessage(), 1500);
        break;

      case ProvisioningType.PUBLIC_KEY:
        console.log("received device public key");
        this.parsePublicKeyPDU(data);
      // this.makeConfirmationMessage();

      default:
        break;
    }
  }

  /**
   * Refer to Mesh Profile Specification 5.4.1.2.
   */
  private parseCapabilitiesPDU(pdu: string) {
    this.nodeToProvision.numberOfElements = pdu.substring(0, 2);
    this.nodeToProvision.algorithms = pdu.substring(2, 6);
    this.nodeToProvision.pubKeyType = pdu.substring(6, 8);
    this.nodeToProvision.staticOOBType = pdu.substring(8, 10);
    this.nodeToProvision.outputOOBSize = pdu.substring(10, 12);
    this.nodeToProvision.outputOOBAction = pdu.substring(12, 16);
    this.nodeToProvision.inputOOBSize = pdu.substring(16, 18);
    this.nodeToProvision.inputOOBAction = pdu.substring(18, pdu.length);
  }

  private parsePublicKeyPDU(pdu: string) {
    this.nodeToProvision.publicKey = pdu;
  }

  __testSetNodeToProvision(
    numberOfElements: string,
    algorithms: string,
    pubKeyType: string,
    staticOOBType: string,
    outputOOBSize: string,
    outputOOBAction: string,
    inputOOBSize: string,
    inputOOBAction: string
  ) {
    this.nodeToProvision.numberOfElements = numberOfElements;
    this.nodeToProvision.algorithms = algorithms;
    this.nodeToProvision.pubKeyType = pubKeyType;
    this.nodeToProvision.staticOOBType = staticOOBType;
    this.nodeToProvision.outputOOBSize = outputOOBSize;
    this.nodeToProvision.outputOOBAction = outputOOBAction;
    this.nodeToProvision.inputOOBSize = inputOOBSize;
    this.nodeToProvision.inputOOBAction = inputOOBAction;
  }
}

export default Provisioner;
